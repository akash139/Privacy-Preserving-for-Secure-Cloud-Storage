and availability of stored data for detecting faults
and automatic recovery. Moreover, this verification
is necessary to provide reliability by automatically
maintaining multiple copies of data and automatically
redeploying processing logic in the event of failures.
Although existing schemes can make a false or true
decision for data possession without downloading
data at untrusted stores, they are not suitable for
a distributed cloud storage environment since they
were not originally constructed on interactive proof
system. For example, the schemes based on Merkle
Hash tree (MHT), such as DPDP-I, DPDP-II [2] and
SPDP [4] in Table 1, use an authenticated skip list to
check the integrity of file blocks adjacently in space.
Unfortunately, they did not provide any algorithms
for constructing distributed Merkle trees that are
necessary for efficient verification in a multi-cloud
environment. In addition, when a client asks for a file
block, the server needs to send the file block along
with a proof for the intactness of the block. However,
this process incurs significant communication overhead
in a multi-cloud environment, since the server
in one cloud typically needs to generate such a proof
with the help of other cloud storage services, where
the adjacent blocks are stored. The other schemes,
such as PDP [2], CPOR-I, and CPOR-II [6] in Table
1, are constructed on homomorphic verification tags,
by which the server can generate tags for multiple file
blocks in terms of a single response value. However,
that doesn’t mean the responses from multiple clouds
can be also combined into a single value on the
client side. For lack of homomorphic responses, clients
must invoke the PDP protocol repeatedly to check
the integrity of file blocks stored in multiple cloud
servers. Also, clients need to know the exact position
of each file block in a multi-cloud environment. In
addition, the verification process in such a case will
lead to high communication overheads and computation
costs at client sides as well. Therefore, it is of
utmost necessary to design a cooperative PDP model
to reduce the storage and network overheads and
enhance the transparency of verification activities in
cluster-based cloud storage systems. Moreover, such a
cooperative PDP scheme should provide features for
timely detecting abnormality and renewing multiple
copies of data.
Even though existing PDP schemes have addressed
various security properties, such as public verifiability
[2], dynamics [5], scalability [4], and privacy
preservation [7], we still need a careful consideration
of some potential attacks, including two major categories:
Data Leakage Attack by which an adversary
can easily obtain the stored data through verification
process after running or wiretapping sufficient
verification communications (see Attacks 1 and 3 in
Appendix A), and Tag Forgery Attack by which a
dishonest CSP can deceive the clients (see Attacks 2
and 4 in Appendix A). These two attacks may cause
potential risks for privacy leakage and ownership
cheating. Also, these attacks can more easily compromise
the security of a distributed cloud system than
that of a single cloud system.
Although various security models have been proposed
for existing PDP schemes [2], [7], [6], these
models still cannot cover all security requirements,
especially for provable secure privacy preservation
and ownership authentication. To establish a highly
effective security model, it is necessary to analyze the
PDP scheme within the framework of zero-knowledge
proof system (ZKPS) due to the reason that PDP
system is essentially an interactive proof system (IPS),
which has been well studied in the cryptography community.
In summary, a verification scheme for data
integrity in distributed storage environments should
have the following features:
· Usability aspect: A client should utilize the
integrity check in the way of collaboration services.
The scheme should conceal the details of the storage
to reduce the burden on clients;
· Security aspect: The scheme should provide adequate
security features to resist some existing attacks,
such as data leakage attack and tag forgery attack;
· Performance aspect: The scheme should have
the lower communication and computation overheads
than non-cooperative solution.